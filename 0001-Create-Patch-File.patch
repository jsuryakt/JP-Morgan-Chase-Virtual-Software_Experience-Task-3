From 1474833d5ab34e2c3333e85aeb9589a18dea8d6b Mon Sep 17 00:00:00 2001
From: jsuryakt <jsuryakt@gmail.com>
Date: Sat, 16 May 2020 18:23:47 +0530
Subject: [PATCH] Create Patch File

---
 datafeed/server3.py    |  4 ++--
 src/DataManipulator.ts | 36 ++++++++++++++++++++++++------------
 src/DataStreamer.ts    |  2 +-
 src/Graph.tsx          | 25 +++++++++++++++----------
 4 files changed, 42 insertions(+), 25 deletions(-)

diff --git a/datafeed/server3.py b/datafeed/server3.py
index 2de4e28..c753546 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -202,7 +202,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 8088):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
@@ -215,7 +215,7 @@ def run(routes, host = '0.0.0.0', port = 8080):
     thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print ('HTTP server started on port 8080')
+    print ('HTTP server started on port 8088')
     while True:
         from time import sleep
         sleep(1)
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..eadfde1 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,32 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+      price_abc: number,
+      price_def:number,
+      ratio: number,
+      upper_bound: number,
+      lower_bound: number,
+      timestamp: Date,
+      trigger_alert:number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price)/2;
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price)/2;
+    const ratio = priceABC/priceDEF;
+    const upperBound = 1+0.04;
+    const lowerBound = 1-0.03;
+    return  {
+      price_def: priceDEF,
+      price_abc: priceABC,
+      ratio,
+      timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ?
+        serverRespond[0].timestamp : serverRespond[1].timestamp,
+        upper_bound: upperBound,
+        lower_bound: lowerBound,
+        trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined, 
+    };
   }
-}
+}
\ No newline at end of file
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 9d9eca7..a2cff6d 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -10,7 +10,7 @@ export interface ServerRespond {
 }
 
 class DataStreamer {
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:8088/query?id=1';
 
   static getData(callback: (data: ServerRespond[]) => void): void {
     const request = new XMLHttpRequest();
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..f726c27 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,10 +23,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc:'float',
+      price_def:'float',
+      ratio: 'float',
+      upper_bound: 'float',
+      lower_bound: 'float',
       timestamp: 'date',
+      trigger_alert:'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +39,25 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('columns', '["ratio","upper_bound","lower_bound","trigger_alert"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc:'avg',
+        price_def:'avg',
+        ratio: 'avg',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
         timestamp: 'distinct count',
+        trigger_alert:'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
-- 
2.26.2.windows.1

